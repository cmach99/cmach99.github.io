import java.util.concurrent.CountDownLatch;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

class Processor implements Runnable {

	CountDownLatch latch;

	public Processor(CountDownLatch latch) {
		this.latch = latch;	

	}

	public void run() {
		
		System.out.println("Latch started");
		
		try {
			Thread.sleep(100);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		
		latch.countDown();
		
	}

}

public class App {
	// Thread safe class - decrements the latch by one until you reach zero
	static CountDownLatch latch = new CountDownLatch(3);

	public static void main(String[] args) {
	
		ExecutorService ex = Executors.newFixedThreadPool(3);
		
		for(int i =0; i<3; i++){
			ex.submit(new Processor(latch));
			
			
		}
		
		try {
			ex.shutdown();
			ex.awaitTermination(1, TimeUnit.DAYS);
			
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		System.out.println("Process finished!!");

	}

}
