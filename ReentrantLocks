import java.util.Scanner;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

public class Runner {

	private int count;
	private Lock lock1 = new ReentrantLock();
	private Condition cond = lock1.newCondition();

	public void increment() {

		for (int i = 0; i < 1000; i++) {

			count++;
		}
	}

	public void firstThread() throws InterruptedException {
		lock1.lock();

		System.out.println("Waiting ....");
		cond.await();

		System.out.println("Woken up!");

		try {
			increment();
		} finally {
			lock1.unlock();
		}
	}

	@SuppressWarnings("resource")
	public void secondThread() throws InterruptedException {

		Thread.sleep(1000);
		lock1.lock();

		System.out.println("Press the return key!");
		new Scanner(System.in).nextLine();
		System.out.println("Got return key!");

		cond.signal();

		try {
			increment();
		} finally {
			lock1.unlock();
		}
	}

	public void finished() {
		System.out.println("Count is: " + count);
		
		
		
		
		
		
		
	}
}
